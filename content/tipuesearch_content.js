var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: https://github.com/mdecp2024/hw-41323128 \n 個人網站: https://mdecp2024.github.io/hw-41323128/content/index.html \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \xa0 \xa0 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'W7', 'text': '\n   \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W10', 'text': '\n \n 在 Python 中，變數命名有以下幾點要注意： \n 以字母或底線開頭，不能以數字開頭。 \n 只能包含字母、數字和底線，不能有空格或特殊符號。 \n 區分大小寫，如  myVar  和  myvar  是不同變數。 \n 不能使用關鍵字（如  if 、 while 、 class  等。 \n \n \n', 'tags': '', 'url': 'W10.html'}, {'title': 'w11_hw', 'text': '1.\xa0 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL) \n 第一題解答:" *"字號圓形 \n 2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n 第二題解答: 網頁上的方格與塗色 \n 3. 完成上列題目後, 請利用 Youtube 影片 簡報 個人的解題過程與心得. \n \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': '1. 請各組組員分別利用 \xa0 Brython 以及 Jupyter lab \xa0 環境, 執行 可攜程式 \xa0 notebook 目錄中的 \xa0 01_string_input_print.ipynb 至\xa010_for_search.ipynb \xa0 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 \xa0 Gist \xa0 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得. \n 第一題:input與 print \n input範例程式： 你叫啥 \n 說明:顯示提示訊息 「你叫啥」,等待使用者輸入,將使用者輸入的內容（字串形式）傳回。 \n input("你叫啥") \n \n print範例程式： 貓咪 \n 說明:print (" /\\_/\\ ") 這行打印貓的耳朵和頭頂部分，看起來像一隻貓的頭形。 python 複製程式碼 print (" >^.^< ") 這行是貓的臉，> 和 < 是貓的嘴角，^ 是鼻子和眼睛的表現，構成了一個可愛的表情。 python 複製程式碼 print (" / \\ ") 這是貓的身體部分，/ 和 \\ 表示貓的兩條腿，讓整體形狀更加完整。 python 複製程式碼 print (" (___)___") 最後一行是貓的尾巴和後半身，用括號和下劃線呈現出圓潤的形狀，結束整體圖案。 當程式運行時，會輸出如下貓咪圖案： markdown 複製程式碼 /\\_/\\ >^.^< / \\ (___)___ \n print (" /\\_/\\   ")\nprint (" >^.^<   ")\nprint ("  / \\    ")\nprint (" (___)___") \n 第二題:variables \n 2-1範例程式： 名字 \n 說明:這段程式碼定義兩個字串變數\xa0 first_name \xa0和\xa0 last_name ，分別儲存名字和姓氏，然後用\xa0 print() \xa0函式輸出這些值。 \n first_name = "Rui"  # 定義變數 first_name，內容是字串 "Rui"\nlast_name  = "Jun"     # 定義變數 last_name，內容是字串 "Jun"\nprint(first_name)        # 將變數 first_name 的內容輸出到終端\nprint(last_name)         # 將變數 last_name 的內容輸出到終端 \n 2-2範例: 名子+喜歡的食物 \n 說明:一個簡單的互動式程式，功能是詢問使用者名字和最喜歡的食物，然後輸出相關訊息。 \n name = input("What\'s your name? ")  # 提示使用者輸入名字\nfavorite_food = input("What is your favorite food? ")  # 提示使用者輸入最喜歡的食物\n \nprint("Hi! My name is " + name)  # 顯示名字\nprint("My favorite food is " + favorite_food)  # 顯示最喜歡的食物\nprint(name + "\'s favorite food is " + favorite_food)  # 顯示完整句子 \n 第三題:list_if_in_else \n 範例: 購買書籍 \n 說明:程式碼會顯示一個書籍清單，然後詢問使用者想購買的書籍。如果使用者選擇的書籍在清單中，程式會顯示「有售」，否則顯示「無售」。 \n programming_books = ["Learn python", "Python for all", "Intro to python"]  # 定義書籍清單\nprint(programming_books)  # 顯示可選擇的書籍\n \nwanted_book = input("Hi! What book would you like to buy?")  # 提示使用者輸入想購買的書籍名稱\nprint(wanted_book)  # 顯示使用者輸入的書籍名稱\n \n# 判斷書籍是否在可購買清單中\nif wanted_book in programming_books:\n    print("Yes, we sell it!")  # 書籍在清單中，顯示有售\nelse:\n    print("Sorry, we don\'t sell that book")  # 書籍不在清單中，顯示無售 \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': 'w13上課題目: \n  導入 brython 程式庫  \n \n \n \n \n \n \n \n \n \n w13 作業 : \n from browser import html\nfrom browser import document as doc\n\n# 建立 canvas 元素\ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 定義圓心和半徑\nx1, y1 = 200, 200  # 第一個圓的圓心\nx2, y2 = 300, 300  # 第二個圓的圓心\nradius = 141.4  # 圓的半徑\n\nctx = canvas.getContext("2d")\n\n# === 繪製第一個圓 ===\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.fillStyle = "black"\nctx.fill()\n\n# === 繪製重疊區域 (黑色交集區塊) ===\nctx.save()  # 保存繪圖狀態\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.clip()  # 限制繪圖範圍為第一個圓\n\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.fillStyle = "black"\nctx.fill()\nctx.restore()  # 恢復繪圖狀態\n\n# === 填充第一個圓其他區域 ===\n# 填充左半部分 (黃色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159, 3.14159 * 1.5, False)\nctx.closePath()\nctx.fillStyle = "yellow"\nctx.fill()\n\n# 填充上半部分 (橙色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159 * 1.5, 0, False)\nctx.closePath()\nctx.fillStyle = "orange"\nctx.fill()\n\n# 填充左下部分 (綠色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159 * 0.5, 3.14159, False)\nctx.closePath()\nctx.fillStyle = "green"\nctx.fill()\n\n# === 填充第二個圓區域 ===\n\n# 填充右上部分 (紫色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 3.14159 * 1.5, 0, False)\nctx.closePath()\nctx.fillStyle = "purple"\nctx.fill()\n\n# 填充右下部分 (粉紅色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 0, 3.14159 * 0.5, False)\nctx.closePath()\nctx.fillStyle = "pink"\nctx.fill()\n\n# 填充下半部分 (藍色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 3.14159 * 0.5, 3.14159, False)\nctx.closePath()\nctx.fillStyle = "blue"\nctx.fill()\n\n# === 繪製輔助框架與對角線 ===\n# 繪製兩個圓的邊框\nctx.lineWidth = 2\nctx.strokeStyle = "black"\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.stroke()\n\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.stroke()\n\n# 繪製正方形框架\nctx.lineWidth = 2\nctx.strokeStyle = "red"\n\n# 第一個正方形\nctx.beginPath()\nctx.rect(100, 100, 200, 200)\nctx.stroke()\nctx.fillStyle = "green"  # 填充顏色\nctx.fill()\n# 第二個正方形\nctx.beginPath()\nctx.rect(200, 200, 200, 200)\nctx.stroke()\nctx.fillStyle = "blue"  # 填充顏色\nctx.fill()\n# 繪製對角線\nctx.lineWidth = 2\nctx.strokeStyle = "red"\nctx.beginPath()\nctx.moveTo(100, 100)\nctx.lineTo(300, 300)\nctx.stroke() \n \n w13作業心學習與應用：這段程式碼不僅演示了如何使用 HTML5 Canvas 畫圓和填充顏色，還展示了如何利用 clip() 方法來處理圓形重疊區域，這對於學習如何在圖形中創建交集和區分不同區域非常有用。 可視化效果：通過不同顏色的區域填充，圖形不僅直觀，而且能夠清晰地展示不同區域之間的相對關係，這樣的呈現方式有助於圖形化數據的表達。 未來改進：未來可以進一步優化圖形的交互性，比如為圖形添加滑鼠事件，讓使用者能夠動態改變圓形的顏色或大小等，提升用戶體驗。: \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_ex', 'text': '請根據兩個圓繪圖所圍成的區域(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務. 參考範例 多個圓相交區域著色範例 \n 作業 : \n from browser import html\nfrom browser import document as doc\nimport random\nimport math\n\n# 定義一個函式來初始化畫布\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\n    """\n    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。\n    返回畫布元素和它的 2D 繪圖上下文。\n    """\n    canvas = html.CANVAS(width=canvas_width, height=canvas_height)\n    brython_div = doc[id]  # 獲取指定 id 的 div 元素\n    brython_div <= canvas  # 將 canvas 插入到該 div 中\n    ctx = canvas.getContext("2d")\n    return canvas, ctx\n\n# 定義一個隨機顏色生成函式\ndef random_color_generator():\n    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)\n    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)\n    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)\n    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串\n\n# 判斷點是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\n    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n\n# 使用者設定的三個圓心座標和半徑，並進行掃描線填充\ndef draw_three_circles(c1, c2, c3):\n    """\n    根據傳入的三個圓的參數繪製圓形並使用掃描線算法填充區域。\n    c1, c2, c3: 每個圓為 (x, y, r) 的元組\n    """\n    canvas, ctx = initialize_canvas(400, 400)\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n    color_dict = {}\n    circles = [c1, c2, c3]\n\n    for py in range(0, canvas.height):\n        for px in range(0, canvas.width):\n            # 確定該像素點屬於哪些圓\n            region = tuple(is_point_in_circle(px, py, cx, cy, r) for cx, cy, r in circles)\n\n            if region not in color_dict:\n                color_dict[region] = random_color_generator()\n\n            current_color = color_dict[region]\n            ctx.fillStyle = current_color\n            ctx.fillRect(px, py, 1, 1)\n\n# 從使用者輸入獲取三個圓的參數\ndef get_three_circles_input():\n    """\n    從使用者輸入獲取三個圓的參數。\n    返回包含三個圓參數的列表。\n    """\n    circles = []\n    for i in range(1, 4):\n        while True:\n            try:\n                input_data = input(f"請輸入第 {i} 個圓的圓心 (x, y) 和半徑 r，格式為 x,y,r: ")\n                x, y, r = map(int, input_data.split(","))\n                circles.append((x, y, r))\n                break\n            except ValueError:\n                print("輸入格式錯誤，請重新輸入。")\n    return circles\n\n# 主程式\ndef main():\n    print("請輸入三個圓的參數來繪製。")\n    circles = get_three_circles_input()\n    if len(circles) == 3:\n        draw_three_circles(*circles)\n    else:\n        print("輸入的圓數量不足，程式結束。")\n\n# 呼叫主程式\nmain()\n \n \n \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'w15', 'text': '題目一範例 : \n sum = 0\nfor i in range(0,101):\n    sum +=i\nprint(sum) \n 題目二範例 : \n # 運算程式\ndef addto(start, end):   # 定義函數 addto，接受兩個參數 start 和 end\n    sum_result = 0       # 設定變數 sum_result，初始值為 0，用於儲存累加結果\n    i = start            # 設定變數 i 的初始值為 start，作為計數器\n    while i <= end:      # 使用 while 迴圈，條件為 i 小於或等於 end\n        sum_result += i  # 將目前的 i 值加到 sum_result 中\n        i += 1           # 將 i 的值加 1，進行下一次的迴圈\n    return sum_result    # 終止函數運行並返回計算結果 sum_result\n     \n# 調用程式\nresult = addto(1, 100)   # 調用函數 addto，設定起始值為 1，結束值為 100\nprint(result)            # 列印函數返回的結果 result \n 題目三範例 : \n def addto(start, end):\n    """\n    計算從 start 加到 end 的總和\n\n    Args:\n        start (int): 起始值\n        end (int): 結束值\n\n    Returns:\n        int: 從 start 到 end 的總和\n    """\n    sum_result = 0  # 建立變數 sum_result，初始值為 0\n    i = start  # 初始化 i，設為起始值\n    while i <= end:  # 使用 while 迴圈，條件為 i 小於或等於結束值\n        sum_result += i  # 將 i 的值累加到 sum_result\n        i += 1  # 將 i 的值加 1，進行下一次的迴圈\n    return sum_result  # 返回最終的總和\n\n# 呼叫函式並輸出結果\nresult = addto(1, 100)\nprint(result)  # 輸出從 1 加到 100 的結果 \n 第四題範例 : \n # 運算程式\ndef add_avoid_8(start, end):  \n    """\n    計算從 start 到 end 範圍內的總和，跳過包含數字 "8" 的整數\n\n    Args:\n        start (int): 起始值\n        end (int): 結束值\n\n    Returns:\n        int: 範圍內避開數字 "8" 的累加總和\n    """\n    sum_result = 0  # 設定變數 sum_result，初始值為 0，用於儲存累加結果\n    i = start       # 設定變數 i 的初始值為 start，作為計數器\n    while i <= end:  # 使用 while 迴圈，條件為 i 小於或等於 end\n        if \'8\' not in str(i):  # 將數字 i 轉為字串，判斷是否不包含數字 "8"\n            sum_result += i  # 若不包含數字 "8"，將 i 加到 sum_result 中\n        i += 1  # 將 i 的值加 1，進行下一次的迴圈\n    return sum_result  # 終止函數運行並返回計算結果 sum_result\n\n# 調用程式\nresult = add_avoid_8(1, 100)  # 設定起始值為 1，結束值為 100\nprint(result)  # 列印從 1 到 100 的累加總和，避開包含數字 "8" 的數字 \n', 'tags': '', 'url': 'w15.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n \n \n \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};