<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323128">https://github.com/mdecp2024/hw-41323128</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41323128/content/index.html">https://mdecp2024.github.io/hw-41323128/content/index.html</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a>   </p>
<div class="no-translate immersive-translate-error-modal-input-shadow-root" id="immersive-translate-modal-input-root" style="color-scheme: initial; forced-color-adjust: initial; mask: initial; math-depth: initial; position: initial; position-anchor: initial; text-size-adjust: initial; appearance: initial; color: initial; font: initial; font-palette: initial; font-synthesis: initial; inset-area: initial; position-area: initial; text-orientation: initial; text-rendering: initial; text-spacing-trim: initial; -webkit-font-smoothing: initial; -webkit-locale: initial; -webkit-text-orientation: initial; -webkit-writing-mode: initial; writing-mode: initial; zoom: initial; accent-color: initial; place-content: initial; place-items: initial; place-self: initial; alignment-baseline: initial; anchor-name: initial; animation-composition: initial; animation: initial; app-region: initial; aspect-ratio: initial; backdrop-filter: initial; backface-visibility: initial; background: initial; background-blend-mode: initial; baseline-shift: initial; baseline-source: initial; block-size: initial; border-block: initial; border: initial; border-radius: initial; border-collapse: initial; border-end-end-radius: initial; border-end-start-radius: initial; border-inline: initial; border-start-end-radius: initial; border-start-start-radius: initial; inset: initial; box-decoration-break: initial; box-shadow: initial; box-sizing: initial; break-after: initial; break-before: initial; break-inside: initial; buffered-rendering: initial; caption-side: initial; caret-color: initial; clear: initial; clip: initial; clip-path: initial; clip-rule: initial; color-interpolation: initial; color-interpolation-filters: initial; color-rendering: initial; columns: initial; column-fill: initial; gap: initial; column-rule: initial; column-span: initial; contain: initial; contain-intrinsic-block-size: initial; contain-intrinsic-size: initial; contain-intrinsic-inline-size: initial; container: initial; content: initial; content-visibility: initial; counter-increment: initial; counter-reset: initial; counter-set: initial; cursor: initial; cx: initial; cy: initial; d: initial; display: block; dominant-baseline: initial; empty-cells: initial; field-sizing: initial; fill: initial; fill-opacity: initial; fill-rule: initial; filter: initial; flex: initial; flex-flow: initial; float: initial; flood-color: initial; flood-opacity: initial; grid: initial; grid-area: initial; height: initial; hyphenate-character: initial; hyphenate-limit-chars: initial; hyphens: initial; image-orientation: initial; image-rendering: initial; initial-letter: initial; inline-size: initial; inset-block: initial; inset-inline: initial; interpolate-size: initial; isolation: initial; letter-spacing: initial; lighting-color: initial; line-break: initial; list-style: initial; margin-block: initial; margin: initial; margin-inline: initial; marker: initial; mask-type: initial; math-shift: initial; math-style: initial; max-block-size: initial; max-height: initial; max-inline-size: initial; max-width: initial; min-block-size: initial; min-height: initial; min-inline-size: initial; min-width: initial; mix-blend-mode: initial; object-fit: initial; object-position: initial; object-view-box: initial; offset: initial; opacity: initial; order: initial; orphans: initial; outline: initial; outline-offset: initial; overflow-anchor: initial; overflow-clip-margin: initial; overflow-wrap: initial; overflow: initial; overlay: initial; overscroll-behavior-block: initial; overscroll-behavior-inline: initial; overscroll-behavior: initial; padding-block: initial; padding: initial; padding-inline: initial; page: initial; page-orientation: initial; paint-order: initial; perspective: initial; perspective-origin: initial; pointer-events: initial; position-try: initial; position-visibility: initial; quotes: initial; r: initial; resize: initial; rotate: initial; ruby-align: initial; ruby-position: initial; rx: initial; ry: initial; scale: initial; scroll-behavior: initial; scroll-margin-block: initial; scroll-margin: initial; scroll-margin-inline: initial; scroll-padding-block: initial; scroll-padding: initial; scroll-padding-inline: initial; scroll-snap-align: initial; scroll-snap-stop: initial; scroll-snap-type: initial; scroll-timeline: initial; scrollbar-color: initial; scrollbar-gutter: initial; scrollbar-width: initial; shape-image-threshold: initial; shape-margin: initial; shape-outside: initial; shape-rendering: initial; size: initial; speak: initial; stop-color: initial; stop-opacity: initial; stroke: initial; stroke-dasharray: initial; stroke-dashoffset: initial; stroke-linecap: initial; stroke-linejoin: initial; stroke-miterlimit: initial; stroke-opacity: initial; stroke-width: initial; tab-size: initial; table-layout: initial; text-align: initial; text-align-last: initial; text-anchor: initial; text-combine-upright: initial; text-decoration: initial; text-decoration-skip-ink: initial; text-emphasis: initial; text-emphasis-position: initial; text-indent: initial; text-overflow: initial; text-shadow: initial; text-transform: initial; text-underline-offset: initial; text-underline-position: initial; text-wrap: initial; timeline-scope: initial; touch-action: initial; transform: initial; transform-box: initial; transform-origin: initial; transform-style: initial; transition: initial; translate: initial; user-select: initial; vector-effect: initial; vertical-align: initial; view-timeline: initial; view-transition-class: initial; view-transition-name: initial; visibility: initial; border-spacing: initial; -webkit-box-align: initial; -webkit-box-decoration-break: initial; -webkit-box-direction: initial; -webkit-box-flex: initial; -webkit-box-ordinal-group: initial; -webkit-box-orient: initial; -webkit-box-pack: initial; -webkit-box-reflect: initial; -webkit-line-break: initial; -webkit-line-clamp: initial; -webkit-mask-box-image: initial; -webkit-print-color-adjust: initial; -webkit-rtl-ordering: initial; -webkit-ruby-position: initial; -webkit-tap-highlight-color: initial; -webkit-text-combine: initial; -webkit-text-decorations-in-effect: initial; -webkit-text-fill-color: initial; -webkit-text-security: initial; -webkit-text-stroke: initial; -webkit-user-drag: initial; white-space-collapse: initial; widows: initial; width: initial; will-change: initial; word-break: initial; word-spacing: initial; x: initial; y: initial; z-index: 2147483647;" translate="no"></div>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>W7</h3>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="716" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/MzOG7lShBLE" title="cp hw   Google Chrome 2024 10 24 15 14 24" width="1201"></iframe> <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="716" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/kGa_u9BZ3VQ" title="cp hw   Google Chrome 2024 10 24 19 26 14" width="1201"></iframe></p>
<h3>W10</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="716" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/s80AO9Qsb-g" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目一: 41323128" width="1146"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="716" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/vFxOepCVSkQ" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目二:41323128" width="1146"></iframe></p>
<p>在 Python 中，變數命名有以下幾點要注意：</p>
<p>以字母或底線開頭，不能以數字開頭。</p>
<p>只能包含字母、數字和底線，不能有空格或特殊符號。</p>
<p>區分大小寫，如 <code>myVar</code> 和 <code>myvar</code> 是不同變數。</p>
<p>不能使用關鍵字（如 <code>if</code>、<code>while</code>、<code>class</code> 等。</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="716" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/M7fFuKtXV1E" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - 題目三:41323128" width="1150"></iframe></p>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p><span>第一題解答:"</span><a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/6cb01213b57768ee16ee9c2c77c7373c/raw/e26339bc509c86cee6fe95680b260823aee56f1b/hw1.py">*"字號圓形</a></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><span>第二題解答:</span><a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/6cb01213b57768ee16ee9c2c77c7373c/raw/e26339bc509c86cee6fe95680b260823aee56f1b/hw2.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="716" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/_t01fLddoec" title="w11 41323128 題目一、二詳解" width="1146"></iframe></p>
<h3>w12_hw</h3>
<p>1. 請各組組員分別利用<span> </span><span>Brython 以及 Jupyter lab</span><span> </span>環境, 執行<a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> </span>notebook 目錄中的<span> </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> </span>筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人<span> </span><span>Gist</span><span> </span>後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</p>
<p>第一題:input與 print</p>
<p>input範例程式：<a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/e041279701d8365d136fd1231f2fc5e5/raw/f12c1dabb839bcf39bfba6ea6df40354a6b69e3a/hw1.py">你叫啥</a></p>
<p>說明:顯示提示訊息 「你叫啥」,等待使用者輸入,將使用者輸入的內容（字串形式）傳回。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">input("你叫啥")</pre>
<p></p>
<p>print範例程式：<a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/e041279701d8365d136fd1231f2fc5e5/raw/6d4cf1cbaba964f557084367f6b1b45c0dcc23cd/hw2.py">貓咪</a></p>
<p>說明:print (" /\_/\ ") 這行打印貓的耳朵和頭頂部分，看起來像一隻貓的頭形。 python 複製程式碼 print (" &gt;^.^&lt; ") 這行是貓的臉，&gt; 和 &lt; 是貓的嘴角，^ 是鼻子和眼睛的表現，構成了一個可愛的表情。 python 複製程式碼 print (" / \ ") 這是貓的身體部分，/ 和 \ 表示貓的兩條腿，讓整體形狀更加完整。 python 複製程式碼 print (" (___)___") 最後一行是貓的尾巴和後半身，用括號和下劃線呈現出圓潤的形狀，結束整體圖案。 當程式運行時，會輸出如下貓咪圖案： markdown 複製程式碼 /\_/\ &gt;^.^&lt; / \ (___)___</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">print (" /\_/\   ")
print (" &gt;^.^&lt;   ")
print ("  / \    ")
print (" (___)___")</pre>
<p><span>第二題:variables</span></p>
<p><span>2-1範例程式：<a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/e041279701d8365d136fd1231f2fc5e5/raw/98d56414aa4ff975a0bd16c3d6d25794f519a203/hw3.py">名字</a></span></p>
<p><span>說明:這段程式碼定義兩個字串變數 <code>first_name</code> 和 <code>last_name</code>，分別儲存名字和姓氏，然後用 <code>print()</code> 函式輸出這些值。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">first_name = "Rui"  # 定義變數 first_name，內容是字串 "Rui"
last_name  = "Jun"     # 定義變數 last_name，內容是字串 "Jun"
print(first_name)        # 將變數 first_name 的內容輸出到終端
print(last_name)         # 將變數 last_name 的內容輸出到終端</pre>
<p>2-2範例:<a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/e041279701d8365d136fd1231f2fc5e5/raw/1946eddeafffcfaf3dd2b665d6688ae0207c5339/hw4.py">名子+喜歡的食物</a></p>
<p><span>說明:一個簡單的互動式程式，功能是詢問使用者名字和最喜歡的食物，然後輸出相關訊息。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">name = input("What's your name? ")  # 提示使用者輸入名字
favorite_food = input("What is your favorite food? ")  # 提示使用者輸入最喜歡的食物
 
print("Hi! My name is " + name)  # 顯示名字
print("My favorite food is " + favorite_food)  # 顯示最喜歡的食物
print(name + "'s favorite food is " + favorite_food)  # 顯示完整句子</pre>
<p><span></span><span>第三題:list_if_in_else</span></p>
<p><span>範例:<a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/e041279701d8365d136fd1231f2fc5e5/raw/9ec8dfe3850a16374efe87cd859f195c4632beae/hw5.py">購買書籍</a></span></p>
<p><span>說明:程式碼會顯示一個書籍清單，然後詢問使用者想購買的書籍。如果使用者選擇的書籍在清單中，程式會顯示「有售」，否則顯示「無售」。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">programming_books = ["Learn python", "Python for all", "Intro to python"]  # 定義書籍清單
print(programming_books)  # 顯示可選擇的書籍
 
wanted_book = input("Hi! What book would you like to buy?")  # 提示使用者輸入想購買的書籍名稱
print(wanted_book)  # 顯示使用者輸入的書籍名稱
 
# 判斷書籍是否在可購買清單中
if wanted_book in programming_books:
    print("Yes, we sell it!")  # 書籍在清單中，顯示有售
else:
    print("Sorry, we don't sell that book")  # 書籍不在清單中，顯示無售</pre>
<p></p>
<h3>w13_hw</h3>
<p>w13上課題目:</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=600, height=600)  # 調整畫布大小以容納圓形
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 1. 繪製兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'  # 設定矩形的邊框顏色為紅色
ctx.beginPath()
ctx.rect(100, 100, 200, 200)  # 第一個正方形的左上角在(100, 100)，邊長200
ctx.rect(200, 200, 200, 200)  # 第二個正方形的左上角在(200, 200)，邊長200
ctx.stroke()

# 2. 繪製對角線 (藍色) - 只連接第一個矩形的左上角和第一個矩形的右下角
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath()
ctx.moveTo(100, 100)  # 起點為第一個矩形的左上角 (100, 100)
ctx.lineTo(300, 300)  # 終點為第一個矩形的右下角 (300, 300)
ctx.stroke()

# 3. 繪製兩個外切圓 (黑色)
ctx.strokeStyle = 'black'  # 設定圓的顏色為黑色

# 第一個矩形的外切圓
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)  # 圓心在(200, 200)，半徑為141.4（sqrt(2) * 邊長的一半）
ctx.stroke()

# 第二個矩形的外切圓
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)  # 圓心在(300, 300)，半徑為141.4
ctx.stroke()
</script>
<p>w13<a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/82e1fa4d1f3a9f6cec9400deccc1a69b/raw/4a2b5e65bf05f2834d4cbdb7207ec60272802522/hw1.py">作業</a>:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 建立 canvas 元素
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 定義圓心和半徑
x1, y1 = 200, 200  # 第一個圓的圓心
x2, y2 = 300, 300  # 第二個圓的圓心
radius = 141.4  # 圓的半徑

ctx = canvas.getContext("2d")

# === 繪製第一個圓 ===
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.fillStyle = "black"
ctx.fill()

# === 繪製重疊區域 (黑色交集區塊) ===
ctx.save()  # 保存繪圖狀態
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.clip()  # 限制繪圖範圍為第一個圓

ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "black"
ctx.fill()
ctx.restore()  # 恢復繪圖狀態

# === 填充第一個圓其他區域 ===
# 填充左半部分 (黃色)
ctx.beginPath()
ctx.moveTo(x1, y1)
ctx.arc(x1, y1, radius, 3.14159, 3.14159 * 1.5, False)
ctx.closePath()
ctx.fillStyle = "yellow"
ctx.fill()

# 填充上半部分 (橙色)
ctx.beginPath()
ctx.moveTo(x1, y1)
ctx.arc(x1, y1, radius, 3.14159 * 1.5, 0, False)
ctx.closePath()
ctx.fillStyle = "orange"
ctx.fill()

# 填充左下部分 (綠色)
ctx.beginPath()
ctx.moveTo(x1, y1)
ctx.arc(x1, y1, radius, 3.14159 * 0.5, 3.14159, False)
ctx.closePath()
ctx.fillStyle = "green"
ctx.fill()

# === 填充第二個圓區域 ===

# 填充右上部分 (紫色)
ctx.beginPath()
ctx.moveTo(x2, y2)
ctx.arc(x2, y2, radius, 3.14159 * 1.5, 0, False)
ctx.closePath()
ctx.fillStyle = "purple"
ctx.fill()

# 填充右下部分 (粉紅色)
ctx.beginPath()
ctx.moveTo(x2, y2)
ctx.arc(x2, y2, radius, 0, 3.14159 * 0.5, False)
ctx.closePath()
ctx.fillStyle = "pink"
ctx.fill()

# 填充下半部分 (藍色)
ctx.beginPath()
ctx.moveTo(x2, y2)
ctx.arc(x2, y2, radius, 3.14159 * 0.5, 3.14159, False)
ctx.closePath()
ctx.fillStyle = "blue"
ctx.fill()

# === 繪製輔助框架與對角線 ===
# 繪製兩個圓的邊框
ctx.lineWidth = 2
ctx.strokeStyle = "black"
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.stroke()

ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.stroke()

# 繪製正方形框架
ctx.lineWidth = 2
ctx.strokeStyle = "red"

# 第一個正方形
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.stroke()
ctx.fillStyle = "green"  # 填充顏色
ctx.fill()
# 第二個正方形
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.stroke()
ctx.fillStyle = "blue"  # 填充顏色
ctx.fill()
# 繪製對角線
ctx.lineWidth = 2
ctx.strokeStyle = "red"
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()</pre>
<p></p>
<p>w13作業心學習與應用：這段程式碼不僅演示了如何使用 HTML5 Canvas 畫圓和填充顏色，還展示了如何利用 clip() 方法來處理圓形重疊區域，這對於學習如何在圖形中創建交集和區分不同區域非常有用。 可視化效果：通過不同顏色的區域填充，圖形不僅直觀，而且能夠清晰地展示不同區域之間的相對關係，這樣的呈現方式有助於圖形化數據的表達。 未來改進：未來可以進一步優化圖形的交互性，比如為圖形添加滑鼠事件，讓使用者能夠動態改變圓形的顏色或大小等，提升用戶體驗。:</p>
<h3>w14_ex</h3>
<p>請根據兩個圓繪圖所圍成的區域(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務. 參考範例 多個圓相交區域著色範例</p>
<p><a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/acb2fecdf2228f337704ebcd6b62238e/raw/5ec1c76851a636f1afc898acb9c73f64def27568/hw1.py">作業</a>:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div &lt;= canvas  # 將 canvas 插入到該 div 中
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的三個圓心座標和半徑，並進行掃描線填充
def draw_three_circles(c1, c2, c3):
    """
    根據傳入的三個圓的參數繪製圓形並使用掃描線算法填充區域。
    c1, c2, c3: 每個圓為 (x, y, r) 的元組
    """
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    color_dict = {}
    circles = [c1, c2, c3]

    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            # 確定該像素點屬於哪些圓
            region = tuple(is_point_in_circle(px, py, cx, cy, r) for cx, cy, r in circles)

            if region not in color_dict:
                color_dict[region] = random_color_generator()

            current_color = color_dict[region]
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)

# 從使用者輸入獲取三個圓的參數
def get_three_circles_input():
    """
    從使用者輸入獲取三個圓的參數。
    返回包含三個圓參數的列表。
    """
    circles = []
    for i in range(1, 4):
        while True:
            try:
                input_data = input(f"請輸入第 {i} 個圓的圓心 (x, y) 和半徑 r，格式為 x,y,r: ")
                x, y, r = map(int, input_data.split(","))
                circles.append((x, y, r))
                break
            except ValueError:
                print("輸入格式錯誤，請重新輸入。")
    return circles

# 主程式
def main():
    print("請輸入三個圓的參數來繪製。")
    circles = get_three_circles_input()
    if len(circles) == 3:
        draw_three_circles(*circles)
    else:
        print("輸入的圓數量不足，程式結束。")

# 呼叫主程式
main()
</pre>
<p></p>
<div id="immersive-translate-image-tools" style="all: initial;"></div>
<h3>w15</h3>
<p><a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/7a36991a47a0953f178697595f5f561e/raw/b971a314bc4e48cc9470745eb3f2c386a0eb91ce/hw1.py">題目一範例</a>:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sum = 0
for i in range(0,101):
    sum +=i
print(sum)</pre>
<ul>
<li>初始化變數 <code>sum</code> 為 0，準備存儲累加的結果。</li>
<li>使用 <code>for</code> 迴圈遍歷從 0 到 100 的每一個數字。</li>
<li>將目前的數字 <code>i</code> 加到變數 <code>sum</code> 中，逐步累積總和。</li>
<li>在迴圈結束後，使用 <code>print</code> 函數輸出最終的累加結果。</li>
</ul>
<p><a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/4b8ab87a1b0436bf57af062fa30abd80/raw/dca1ee928c2ce88bc745563221852d7e3653fe8f/hw2.py">題目二範例</a>:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 運算程式
def addto(start, end):   # 定義函數 addto，接受兩個參數 start 和 end
    sum_result = 0       # 設定變數 sum_result，初始值為 0，用於儲存累加結果
    i = start            # 設定變數 i 的初始值為 start，作為計數器
    while i &lt;= end:      # 使用 while 迴圈，條件為 i 小於或等於 end
        sum_result += i  # 將目前的 i 值加到 sum_result 中
        i += 1           # 將 i 的值加 1，進行下一次的迴圈
    return sum_result    # 終止函數運行並返回計算結果 sum_result
     
# 調用程式
result = addto(1, 100)   # 調用函數 addto，設定起始值為 1，結束值為 100
print(result)            # 列印函數返回的結果 result</pre>
<p>說明:此程式實現了一個函數 <code>addto</code>，用於計算從起始值 <code>start</code> 到結束值 <code>end</code>（包含兩者）的整數總和。<br/>透過調用該函數，可以靈活計算不同範圍內的數字總和。</p>
<p><a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/d8a9e29c6b6a9189e496912fbb3cc557/raw/028cd4b4a9a6fe4ee80ccf2512546c1158554030/hw3.py">題目三範例</a>:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):
    """
    計算從 start 加到 end 的總和

    Args:
        start (int): 起始值
        end (int): 結束值

    Returns:
        int: 從 start 到 end 的總和
    """
    sum_result = 0  # 建立變數 sum_result，初始值為 0
    i = start  # 初始化 i，設為起始值
    while i &lt;= end:  # 使用 while 迴圈，條件為 i 小於或等於結束值
        sum_result += i  # 將 i 的值累加到 sum_result
        i += 1  # 將 i 的值加 1，進行下一次的迴圈
    return sum_result  # 返回最終的總和

# 呼叫函式並輸出結果
result = addto(1, 100)
print(result)  # 輸出從 1 加到 100 的結果</pre>
<p><a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/d8a9e29c6b6a9189e496912fbb3cc557/raw/07d7774b05fd2e8479e31a1f05fdb4719b69dfb4/hw4.py">第四題範例</a>:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 運算程式
def add_avoid_8(start, end):  
    """
    計算從 start 到 end 範圍內的總和，跳過包含數字 "8" 的整數

    Args:
        start (int): 起始值
        end (int): 結束值

    Returns:
        int: 範圍內避開數字 "8" 的累加總和
    """
    sum_result = 0  # 設定變數 sum_result，初始值為 0，用於儲存累加結果
    i = start       # 設定變數 i 的初始值為 start，作為計數器
    while i &lt;= end:  # 使用 while 迴圈，條件為 i 小於或等於 end
        if '8' not in str(i):  # 將數字 i 轉為字串，判斷是否不包含數字 "8"
            sum_result += i  # 若不包含數字 "8"，將 i 加到 sum_result 中
        i += 1  # 將 i 的值加 1，進行下一次的迴圈
    return sum_result  # 終止函數運行並返回計算結果 sum_result

# 調用程式
result = add_avoid_8(1, 100)  # 設定起始值為 1，結束值為 100
print(result)  # 列印從 1 到 100 的累加總和，避開包含數字 "8" 的數字</pre>
<p></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/df15af3b65be694155e867d449dacc7e/raw/87cd8420ec39a8c04db1cbcec5b0f01601d4b357/hw1.py">程式碼</a>:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="664" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/XJbr_4rl6Pk" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - w16_exam1: 41323128" width="1112"></iframe></p>
<p></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")
from browser import html
from browser import document as doc
from math import pi, sin, cos, sqrt
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=900, height=300)  # 調整畫布大小
brython_div = doc["brython_div1"]  # 確保 HTML 中有 id="brython_div1" 的元素
brython_div <= canvas
 
ctx = canvas.getContext("2d")
ctx.lineWidth = 2
ctx.strokeStyle = 'black'
 
# 原點座標
origin_x, origin_y = 31, 28
pixel = 2  # 設定單位為 2 像素
 
# 繪製 x 軸
ctx.beginPath()
ctx.moveTo(0, origin_y)  # x 軸起點
ctx.lineTo(canvas.width, origin_y)  # x 軸終點
ctx.strokeStyle = "gray"
ctx.stroke()
 
# 繪製 y 軸
ctx.beginPath()
ctx.moveTo(origin_x, 0)  # y 軸起點
ctx.lineTo(origin_x, canvas.height)  # y 軸終點
ctx.strokeStyle = "gray"
ctx.stroke()
 
# 標示原點座標
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText(f"({origin_x}, {origin_y})", origin_x + 5, origin_y - 5)
 
# 繪製橙色六邊形（保持不變）
ctx.beginPath()
for i in range(6):
    angle = pi / 3 * i
    x = origin_x + (40 * pixel) * cos(angle)  # 改變六邊形大小
    y = origin_y + (40 * pixel) * sin(angle)
    if i == 0:
        ctx.moveTo(x + (50 * pixel), y + (50 * pixel))
    else:
        ctx.lineTo(x + (50 * pixel), y + (50 * pixel))
ctx.closePath()
ctx.fillStyle = "orange"
ctx.fill()
 
# 繪製綠色菱形（x 軸向左移 10）
ctx.beginPath()
ctx.moveTo(origin_x + (125 * pixel), origin_y + (15 * pixel))  # 菱形基準點
ctx.lineTo(origin_x + (145 * pixel), origin_y + (50 * pixel))
ctx.lineTo(origin_x + (125 * pixel), origin_y + (85 * pixel))
ctx.lineTo(origin_x + (105 * pixel), origin_y + (50 * pixel))
ctx.closePath()
ctx.fillStyle = "green"
ctx.fill()
 
# 繪製藍色正三角形（菱形後，x 軸再向左移 20）
triangle_side = 40  # 正三角形邊長
height = (sqrt(3) / 2) * triangle_side  # 正三角形高度
ctx.beginPath()
ctx.moveTo(origin_x + (150 * pixel), origin_y + (50 * pixel))  # 頂點
ctx.lineTo(origin_x + (150 * pixel) - (triangle_side / 2) * pixel, origin_y + (50 * pixel) + (height * pixel))  # 左下頂點
ctx.lineTo(origin_x + (150 * pixel) + (triangle_side / 2) * pixel, origin_y + (50 * pixel) + (height * pixel))  # 右下頂點
ctx.closePath()
ctx.fillStyle = "blue"
ctx.fill()
 
# 繪製粉紅色圓形（菱形後，x 軸再向左移 20，這次再向左移 10）
ctx.beginPath()
ctx.arc(origin_x + (200 * pixel), origin_y + (50 * pixel), (20 * pixel), 0, 2 * pi)  # 圓形的中心點向左再移動 10
ctx.fillStyle = "magenta"
ctx.fill()
 
# 繪製黃色正方形（菱形後，x 軸再向左移 20，這次再向左移 10）
ctx.beginPath()
ctx.rect(origin_x + (250 * pixel), origin_y + (30 * pixel), (40 * pixel), (40 * pixel))  # 正方形的左上角向左再移動 10
ctx.fillStyle = "yellow"
ctx.fill()
 
# 繪製藍色矩形（菱形後，x 軸再向左移 20，這次再向左移 10）
ctx.beginPath()
ctx.rect(origin_x + (310 * pixel), origin_y + (40 * pixel), (60 * pixel), (20 * pixel))  # 矩形的左上角向左再移動 10
ctx.fillStyle = "darkblue"
ctx.fill()
</script>
</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/df15af3b65be694155e867d449dacc7e/raw/3a4b572e4157e8089c6d08534b37cc4ecb15eaf6/hw2.py">程式碼</a>:</p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")
from browser import html
from browser import document as doc

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")

# 畫線的工具函數，設定線條顏色和粗細，然後畫出一條直線
def draw_line(x1, y1, x2, y2, line_width=2, stroke_style="black"):
    ctx.lineWidth = line_width
    ctx.strokeStyle = stroke_style
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.stroke()

# 在藍線左邊第一條和上面第一條附近標記文字
ctx.font = "20px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31,28)", 31+ 120, 28+ 15)

# 繪製藍色多條線條，左上角從(31, 28)開始
blue_start_x = 31
blue_start_y = 28

def draw_blue_rectangles(x, y, scale):
    # 外圍矩形
    draw_line(x + 150 * scale, y + 40 * scale, x + 190 * scale, y + 40 * scale, stroke_style="blue")
    draw_line(x + 210 * scale, y + 40 * scale, x + 250 * scale, y + 40 * scale, stroke_style="blue")
    draw_line(x + 250 * scale, y + 40 * scale, x + 250 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 250 * scale, y + 140 * scale, x + 210 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 140 * scale, x + 150 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 150 * scale, y + 140 * scale, x + 150 * scale, y + 40 * scale, stroke_style="blue")

    # 內部矩形
    draw_line(x + 170 * scale, y + 60 * scale, x + 230 * scale, y + 60 * scale, stroke_style="blue")
    draw_line(x + 230 * scale, y + 60 * scale, x + 230 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 60 * scale, x + 190 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 80 * scale, x + 150 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 210 * scale, y + 80 * scale, x + 210 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 210 * scale, y + 100 * scale, x + 230 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 230 * scale, y + 100 * scale, x + 230 * scale, y + 140 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 80 * scale, x + 170 * scale, y + 80 * scale, stroke_style="blue")
    draw_line(x + 170 * scale, y + 120 * scale, x + 170 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 170 * scale, y + 100 * scale, x + 210 * scale, y + 100 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 140 * scale, x + 190 * scale, y + 120 * scale, stroke_style="blue")
    draw_line(x + 190 * scale, y + 120 * scale, x + 210 * scale, y + 120 * scale, stroke_style="blue")
blue_start_x = 31
blue_start_y = 28
scale = 1 # 你可以更改這個數字來調整縮放比例
draw_blue_rectangles(blue_start_x, blue_start_y, scale)
</script>
</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="716" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/QsEjDwszVGw" title="國立虎尾科技大學機械設計工程系 - 計算機程式 - w16_exam2: 41323128" width="1199"></iframe></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/hw-41323128/content/Brython.html?src=https://gist.githubusercontent.com/41323128/df15af3b65be694155e867d449dacc7e/raw/0f24be1615278c8943a17e547db09537bc441c84/hw3.py">程式碼</a>:</p>
<div id="brython_div1"></div>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")
from browser import html
from browser import document as doc
 
 
# 設定迷宮畫布大小
canvas = html.CANVAS(width=300, height=300)
brython_div = doc["brython_div1"]
brython_div <= canvas
 
# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")
 
# 標示左上方點座標 (31, 28)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 28)", 35, 42)
 
# 定義藍色線條的屬性
ctx.strokeStyle = "black"
ctx.lineWidth = 2
 
# 設定迷宮起點的偏移量
offset_x, offset_y = 31, 28
 
# 迷宮的線條座標
maze_lines = [
    ((0, 0), (86, 0)),
    ((0, 0), (0, 200)),
    ((120, 0), (200, 0)),
    ((200, 0), (200, 200)),
    ((120, 200), (200, 200)),
    ((0, 200), (86, 200)),
    ((86, 157), (86, 200)),
    ((86, 157), (126, 157)),
    ((160, 120), (160, 200)),
    ((160, 120), (50, 120)),
    ((50, 120), (50, 163)),
    ((126, 80), (126, 120)),
    ((0, 80), (86, 80)),
    ((86, 40), (86, 80)),
    ((40, 40), (160, 40)),
    ((160, 40), (160, 83)),
]
 
# 使用輔助函數來簡化畫線的過程
def draw_line(start, end):
    ctx.moveTo(offset_x + start[0], offset_y + start[1])
    ctx.lineTo(offset_x + end[0], offset_y + end[1])
 
# 繪製迷宮
ctx.beginPath()
for start, end in maze_lines:
    draw_line(start, end)
ctx.stroke()
 
# 定義紅色路徑屬性
ctx.strokeStyle = "red"
ctx.lineWidth = 3
 
# 解答路徑
path_solution = [
    (100, 0),    
    (100, 20),   
    (180, 20),  
    (180, 100),  
    (140, 100), 
    (140, 60), 
    (100, 60),
    (100,100),
    (25,100),
    (25,180),
    (65,180),
    (65,140),
    (140,140),
    (140,180),
    (100,180),
    (100,200),
]
 
# 繪製紅色路徑
ctx.beginPath()
for i in range(len(path_solution) - 1):
    start = path_solution[i]
    end = path_solution[i + 1]
    draw_line(start, end)
ctx.stroke()
</script>
</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="716" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/z7SZ3D7s5FE" title="國立虎尾科技大學機械設計工程系 計算機程式 w16 exam3 41323128" width="1199"></iframe></p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;"><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="716" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/kL6nud6QO3E" title="期末報告" width="1199"></iframe></p>
<p>期末書面專題報告檔案 (pdf):</p>
<div style="position: relative; width: 100%; height: 0; padding-top: 56.2500%; padding-bottom: 0; box-shadow: 0 2px 8px 0 rgba(63,69,81,0.16); margin-top: 1.6em; margin-bottom: 0.9em; overflow: hidden; border-radius: 8px; will-change: transform;"><iframe allow="fullscreen" allowfullscreen="allowfullscreen" height="150" loading="lazy" src="https://www.canva.com/design/DAGboqLb-tI/kD04zLETdbqRzaIvmbaj2w/view?embed" style="position: absolute; width: 100%; height: 100%; top: 0; left: 0; border: none; padding: 0; margin: 0;" width="300"></iframe></div>
<p style="padding-left: 30px;">徐睿駿 設計的 <a href="https://www.canva.com/design/DAGboqLb-tI/kD04zLETdbqRzaIvmbaj2w/view?utm_content=DAGboqLb-tI&amp;utm_campaign=designshare&amp;utm_medium=embeds&amp;utm_source=link" rel="noopener" target="_blank">期末報告</a></p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">在這一學期的課程中，我學到了許多與設計相關的專業知識與實用技能，這些經驗不僅豐富了我的學術視野，還提升了我在實際操作中的能力</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<p>寫一個函數 `calculate`，接受三個參數：操作（加、減、乘、除）和兩個數字。根據操作進行對應的計算並返回結果。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def calculate(operation, num1, num2):  # 定義函數 calculate，接受三個參數：操作符、第一個數字和第二個數字
    """
    根據指定的操作符對兩個數字進行計算並返回結果。
    """
    if operation == "加":  # 檢查操作符是否為 "加"
        return num1 + num2  # 返回兩個數字的加法結果
    elif operation == "減":  # 檢查操作符是否為 "減"
        return num1 - num2  # 返回兩個數字的減法結果
    elif operation == "乘":  # 檢查操作符是否為 "乘"
        return num1 * num2  # 返回兩個數字的乘法結果
    elif operation == "除":  # 檢查操作符是否為 "除"
        if num2 != 0:  # 確保第二個數字不是零，避免除以零的錯誤
            return num1 / num2  # 返回兩個數字的除法結果
        else:  # 如果第二個數字是零
            return "錯誤：不能除以零！"  # 返回錯誤訊息
    else:  # 如果操作符不是加、減、乘或除
        return "錯誤：無效的操作！"  # 返回錯誤訊息
print(calculate("加", 10, 5))</pre>
<p><span>寫一個函數 `advanced_calculate`，接受四個參數：操作（加、減、乘、除、次方、取餘數）和兩個數字，以及一個布林值參數，表示是否要返回計算步驟的詳細過程。根據操作進行對應的計算並返回結果和計算步驟（若布林值為真）。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def advanced_calculate(operation, num1, num2, show_steps):  
    """
    根據指定的操作對兩個數字進行計算，並根據布林值決定是否返回計算步驟。
     
    參數：
    - operation: 字符串，指定操作類型（加、減、乘、除、次方、取餘數）
    - num1: 第一個數字
    - num2: 第二個數字
    - show_steps: 布林值，若為 True，則返回計算步驟
 
    返回：
    - 若 show_steps 為 False，僅返回計算結果
    - 若 show_steps 為 True，返回計算結果和步驟描述
 
    測試範例：
    # 測試加法並顯示計算步驟
    print(advanced_calculate("加", 10, 5, True))  # 輸出 (15, "10 + 5 = 15")
 
    # 測試減法並不顯示計算步驟
    print(advanced_calculate("減", 10, 5, False))  # 輸出 5
 
    # 測試乘法並顯示計算步驟
    print(advanced_calculate("乘", 10, 5, True))  # 輸出 (50, "10 * 5 = 50")
 
    # 測試除法並顯示計算步驟
    print(advanced_calculate("除", 10, 5, True))  # 輸出 (2.0, "10 / 5 = 2.0")
 
    # 測試次方
    print(advanced_calculate("次方", 2, 3, True))  # 輸出 (8, "2 ^ 3 = 8")
 
    # 測試取餘數
    print(advanced_calculate("取餘數", 10, 3, True))  # 輸出 (1, "10 % 3 = 1")
 
    # 測試無效操作符
    print(advanced_calculate("平方根", 10, 5, True))  # 輸出 "錯誤：無效的操作！"
 
    # 測試除以零
    print(advanced_calculate("除", 10, 0, True))  # 輸出 "錯誤：不能除以零！"
    """
    steps = ""  # 初始化用於存儲步驟的變數
     
    if operation == "加":  # 檢查是否執行加法
        result = num1 + num2  # 計算加法結果
        steps = f"{num1} + {num2} = {result}"  # 記錄加法步驟
    elif operation == "減":  # 檢查是否執行減法
        result = num1 - num2  # 計算減法結果
        steps = f"{num1} - {num2} = {result}"  # 記錄減法步驟
    elif operation == "乘":  # 檢查是否執行乘法
        result = num1 * num2  # 計算乘法結果
        steps = f"{num1} * {num2} = {result}"  # 記錄乘法步驟
    elif operation == "除":  # 檢查是否執行除法
        if num2 != 0:  # 確保除數不為零
            result = num1 / num2  # 計算除法結果
            steps = f"{num1} / {num2} = {result}"  # 記錄除法步驟
        else:
            return "錯誤：不能除以零！"  # 返回錯誤訊息
    elif operation == "次方":  # 檢查是否執行次方
        result = num1 ** num2  # 計算次方結果
        steps = f"{num1} ^ {num2} = {result}"  # 記錄次方步驟
    elif operation == "取餘數":  # 檢查是否執行取餘數
        result = num1 % num2  # 計算餘數
        steps = f"{num1} % {num2} = {result}"  # 記錄取餘數步驟
    else:  # 無效操作符的情況
        return "錯誤：無效的操作！"  # 返回錯誤訊息
 
    # 根據 show_steps 決定返回結果
    if show_steps:  # 如果需要顯示計算步驟
        return result, steps  # 返回結果和步驟
    else:  # 如果不需要顯示計算步驟
        return result  # 僅返回結果
</pre>
<p><span>寫一個函數 `unit_converter`，接受三個參數：轉換類型（例如：米-公里、克-千克、華氏-攝氏）和兩個數字（值與小數點後的位數）。根據轉換類型進行對應的單位轉換並返回結果。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def unit_converter(conversion_type, value, decimal_places):  
    """
    根據指定的轉換類型對值進行單位轉換，並根據指定的小數點位數返回結果。
     
    參數：
    - conversion_type: 字符串，轉換類型（例如：米-公里、克-千克、華氏-攝氏）
    - value: 數值，需要轉換的數字
    - decimal_places: 整數，小數點後保留的位數
 
    返回：
    - 轉換結果，保留指定的小數點位數
 
    測試範例：
    # 測試米到公里
    print(unit_converter("米-公里", 1500, 2))  # 輸出 1.50
 
    # 測試克到千克
    print(unit_converter("克-千克", 500, 3))  # 輸出 0.500
 
    # 測試華氏到攝氏
    print(unit_converter("華氏-攝氏", 98.6, 1))  # 輸出 37.0
 
    # 測試無效轉換類型
    print(unit_converter("公里-米", 1, 2))  # 輸出 "錯誤：無效的轉換類型！"
    """
    if conversion_type == "米-公里":  # 檢查是否進行米到公里的轉換
        result = value / 1000  # 將數值從米轉換為公里
    elif conversion_type == "克-千克":  # 檢查是否進行克到千克的轉換
        result = value / 1000  # 將數值從克轉換為千克
    elif conversion_type == "華氏-攝氏":  # 檢查是否進行華氏到攝氏的轉換
        result = (value - 32) * 5 / 9  # 使用公式將華氏轉換為攝氏
    else:  # 如果轉換類型無效
        return "錯誤：無效的轉換類型！"  # 返回錯誤訊息
 
    # 返回結果，保留指定的小數點位數
    return round(result, decimal_places)  # 使用 round() 函數保留指定的小數點位數</pre>
<p><span>寫一個函數 `math_quiz`，隨機生成一個數學問題（加、減、乘、除），並接受使用者的答案。檢查答案是否正確，並返回 "正確" 或 "錯誤"。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import random  # 引入隨機模組，用於生成隨機數和隨機操作
 
def math_quiz():
    """
    隨機生成一個數學問題（加、減、乘、除），並接受使用者的答案。
    檢查答案是否正確，並返回 "正確" 或 "錯誤"。
     
    返回：
    - "正確"：若使用者答案正確
    - "錯誤"：若使用者答案錯誤
    """
    # 定義可用的操作類型
    operations = ["+", "-", "*", "/"]
    # 隨機選擇一個操作
    operation = random.choice(operations)
    # 隨機生成兩個數字
    num1 = random.randint(1, 100)
    num2 = random.randint(1, 100)
 
    # 確保除法時除數不為零，並保證整數結果
    if operation == "/":
        num1 = num1 * num2  # 保證結果為整數，避免小數問題
 
    # 根據操作計算正確答案
    if operation == "+":
        correct_answer = num1 + num2
    elif operation == "-":
        correct_answer = num1 - num2
    elif operation == "*":
        correct_answer = num1 * num2
    elif operation == "/":
        correct_answer = num1 // num2  # 整數除法
 
    # 顯示問題給使用者
    print(f"問題：{num1} {operation} {num2} = ?")
 
    # 接受使用者輸入的答案
    try:
        user_answer = int(input("請輸入你的答案："))  # 將輸入轉換為整數
    except ValueError:
        return "錯誤：請輸入有效的數字！"  # 如果輸入無效，提示錯誤
 
    # 比較使用者答案與正確答案
    if user_answer == correct_answer:
        return "正確"
    else:
        return "錯誤"
 
# 測試範例
if __name__ == "__main__":
    # 多次執行測試以檢查功能
    print(math_quiz())  # 問題將隨機生成，結果根據答案顯示 "正確" 或 "錯誤"
</pre>
<p><span>寫一個函數 `basic_statistics`，接受一個包含數字的清單，並返回該清單的平均數、中位數和標準差。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import statistics  # 引入 statistics 模組，用於計算中位數和標準差
 
def basic_statistics(numbers):
    """
    計算一個包含數字的清單的基本統計量：平均數、中位數和標準差。
     
    參數：
    - numbers: 一個包含數字的清單
 
    返回：
    - 一個字典，包含平均數（mean）、中位數（median）和標準差（std_dev）
 
    測試範例：
    # 測試清單 [10, 20, 30, 40, 50]
    print(basic_statistics([10, 20, 30, 40, 50]))  
    # 輸出 {'mean': 30.0, 'median': 30, 'std_dev': 15.811388300841896}
    """
    if not numbers:  # 檢查清單是否為空
        return "錯誤：清單不能為空！"
     
    # 計算平均數
    mean = sum(numbers) / len(numbers)  # 使用 sum() 和 len() 計算平均數
     
    # 計算中位數
    median = statistics.median(numbers)  # 使用 statistics.median() 計算中位數
     
    # 計算標準差
    std_dev = statistics.stdev(numbers) if len(numbers) &gt; 1 else 0  # 保證至少有兩個數字才計算標準差
 
    # 將結果組成字典返回
    return {
        "mean": mean,       # 平均數
        "median": median,   # 中位數
        "std_dev": std_dev  # 標準差
    }
 
# 測試範例
if __name__ == "__main__":
    # 測試非空清單
    print(basic_statistics([10, 20, 30, 40, 50]))  
    # 輸出 {'mean': 30.0, 'median': 30, 'std_dev': 15.811388300841896}
 
    # 測試單一元素清單
    print(basic_statistics([100]))  
    # 輸出 {'mean': 100.0, 'median': 100, 'std_dev': 0}
 
    # 測試空清單
    print(basic_statistics([]))  
    # 輸出 "錯誤：清單不能為空！"
</pre>
<p><span>寫一個函數 `geometry_calculator`，接受三個參數：形狀類型（例如：圓形、矩形、三角形）和兩個數字（對應的長度或寬度等）。根據形狀類型計算並返回面積。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math  # 引入 math 模組，用於處理圓形的計算
 
def geometry_calculator(shape, num1, num2=0):
    """
    根據形狀類型計算面積。
     
    參數：
    - shape: 字符串，表示形狀類型（"圓形", "矩形", "三角形"）
    - num1: 第一個數字（例如半徑、長度或底邊）
    - num2: 第二個數字（例如高度或寬度，圓形可忽略）
 
    返回：
    - 該形狀的面積（浮點數）
    - 或錯誤提示字串，若形狀類型無效或參數不正確
 
    測試範例：
    # 測試圓形
    print(geometry_calculator("圓形", 5))  
    # 輸出 78.53981633974483
 
    # 測試矩形
    print(geometry_calculator("矩形", 4, 5))  
    # 輸出 20.0
 
    # 測試三角形
    print(geometry_calculator("三角形", 6, 8))  
    # 輸出 24.0
 
    # 測試無效形狀
    print(geometry_calculator("五邊形", 3, 4))  
    # 輸出 "錯誤：不支持的形狀類型！"
    """
    # 根據形狀類型進行計算
    if shape == "圓形":
        if num1 &lt;= 0:  # 確保半徑有效
            return "錯誤：圓形的半徑必須大於 0！"
        return math.pi * num1 ** 2  # 計算圓的面積公式：πr^2
     
    elif shape == "矩形":
        if num1 &lt;= 0 or num2 &lt;= 0:  # 確保長寬有效
            return "錯誤：矩形的長和寬必須大於 0！"
        return num1 * num2  # 計算矩形的面積公式：長 × 寬
     
    elif shape == "三角形":
        if num1 &lt;= 0 or num2 &lt;= 0:  # 確保底邊和高度有效
            return "錯誤：三角形的底和高必須大於 0！"
        return 0.5 * num1 * num2  # 計算三角形的面積公式：0.5 × 底 × 高
     
    else:
        return "錯誤：不支持的形狀類型！"  # 若形狀類型無效，返回錯誤訊息
 
# 測試範例
if __name__ == "__main__":
    # 測試圓形
    print(geometry_calculator("圓形", 5))  
    # 輸出 78.53981633974483
 
    # 測試矩形
    print(geometry_calculator("矩形", 4, 5))  
    # 輸出 20.0
 
    # 測試三角形
    print(geometry_calculator("三角形", 6, 8))  
    # 輸出 24.0
 
    # 測試無效形狀
    print(geometry_calculator("五邊形", 3, 4))  
    # 輸出 "錯誤：不支持的形狀類型！"
</pre>
<p><span>寫一個函數 `reverse_string`，接受一個字串作為參數，並返回該字串的反轉版本。例如：`reverse_string("hello")` 應返回 `olleh`。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def reverse_string(s):
    return s[::-1]  # 使用切片方法反轉字串
 
# 測試函數
print(reverse_string("hello"))  # 輸出: olleh</pre>
<p><span>寫一個函數 string_length，接受一個字串作為參數，並返回該字串的長度。例如：string_length("hello") 應返回 5。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def string_length(s):
    return len(s)  # 使用內建的 len() 函數來計算字串的長度
 
# 測試函數
print(string_length("hello"))  # 輸出: 5
</pre>
<p><span>寫一個函數 toggle_case，接受一個字串作為參數，並返回該字串中每個字母大小寫互換後的版本。例如：toggle_case("Hello") 應返回 hELLO。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def toggle_case(s):
    return s.swapcase()  # 使用內建的 swapcase() 函數來互換字母的大小寫
 
# 測試函數
print(toggle_case("Hello"))  # 輸出: hELLO
</pre>
<div>
<div class="syntaxhighlighter py" id="highlighter_609734"><span>寫一個函數 word_count，接受一個字串作為參數，並返回該字串中單詞的數量。例如：word_count("Hello world") 應返回 2。</span>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def word_count(s):
    words = s.split()  # 使用 split() 函數將字串分割為單詞
    return len(words)  # 返回單詞的數量
 
# 測試函數
print(word_count("Hello world"))  # 輸出: 2</pre>
<p><span>寫一個函數 is_palindrome，接受一個字串作為參數，並返回該字串是否為迴文（正反讀都相同）。例如：is_palindrome("madam") 應返回 True。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def is_palindrome(s):
    return s == s[::-1]  # 檢查字串是否等於它的反轉版本
 
# 測試函數
print(is_palindrome("madam"))  # 輸出: True
print(is_palindrome("hello"))  # 輸出: False
</pre>
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="code"></td>
</tr>
</tbody>
</table>
<span>寫一個函數 split_string，接受一個字串和一個分隔符作為參數，並返回一個包含切割後子字串的清單。例如：split_string("hello world", " ") 應返回 ['hello', 'world']。</span></div>
<div class="syntaxhighlighter py">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def split_string(s, delimiter):
    return s.split(delimiter)  # 使用 split() 函數根據分隔符切割字串
 
# 測試函數
print(split_string("hello world", " "))  # 輸出: ['hello', 'world']
</pre>
<span>寫一個函數 `fibonacci`，接受一個整數 `n`，並返回長度為 `n` 的費氏數列。例如：`fibonacci(5)` 應返回 `[0, 1, 1, 2, 3]`。</span></div>
<div class="syntaxhighlighter py">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def fibonacci(n):
    # 初始化費氏數列，前兩個數字是 0 和 1
    fib_sequence = [0, 1]
     
    # 如果 n 是 1，則只返回 [0]
    if n == 1:
        return [0]
     
    # 如果 n 是 2，則返回 [0, 1]
    if n == 2:
        return fib_sequence
     
    # 使用迴圈生成剩餘的費氏數字
    for i in range(2, n):
        next_fib = fib_sequence[-1] + fib_sequence[-2]  # 計算下個費氏數字
        fib_sequence.append(next_fib)  # 將數字加入數列
     
    return fib_sequence
 
# 測試函數
result = fibonacci(5)
print(result)  # 輸出: [0, 1, 1, 2, 3]</pre>
<span>階乘計算： 寫一個函數 factorial，接受一個整數 n，並返回 n 的階乘。例如：factorial(5) 應返回 120。</span></div>
<div class="syntaxhighlighter py">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def factorial(n):
    # 初始階乘值為 1
    result = 1
    # 使用 for 迴圈計算階乘
    for i in range(1, n + 1):
        result *= i  # 將當前數字乘到結果中
    return result
 
# 測試函數
result = factorial(5)
print(result)  # 輸出: 120
</pre>
<span>最小公倍數： 寫一個函數 lcm，接受兩個整數 a 和 b，並返回它們的最小公倍數。例如：lcm(6, 8) 應返回 24。</span></div>
<div class="syntaxhighlighter py">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math
 
def lcm(a, b):
    # 計算最大公因數（GCD）
    gcd = math.gcd(a, b)
    # 計算最小公倍數（LCM）
    return abs(a * b) // gcd
 
# 測試函數
result = lcm(6, 8)
print(result)  # 輸出: 24
</pre>
<span>最大公因數： 寫一個函數 gcd，接受兩個整數 a 和 b，並返回它們的最大公因數。例如：gcd(48, 18) 應返回 6。</span></div>
<div class="syntaxhighlighter py">
<div class="syntaxhighlighter py" id="highlighter_100868"></div>
<div class="syntaxhighlighter py">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def gcd(a, b):
    # 使用歐幾里得算法計算最大公因數
    while b != 0:
        a, b = b, a % b  # 將 a 更新為 b，b 更新為 a 除以 b 的餘數
    return a
 
# 測試函數
result = gcd(48, 18)
print(result)  # 輸出: 6
</pre>
<p><span>階乘和： 寫一個函數 sum_of_factorials，接受一個整數 n，並返回從 1 到 n 的所有整數的階乘和。例如：sum_of_factorials(3) 應返回 9（1! + 2! + 3! = 1 + 2 + 6）。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math
 
def sum_of_factorials(n):
    # 初始化總和為 0
    total_sum = 0
    # 計算從 1 到 n 的所有階乘並累加
    for i in range(1, n + 1):
        total_sum += math.factorial(i)  # 計算 i 的階乘並累加
    return total_sum
 
# 測試函數
result = sum_of_factorials(3)
print(result)  # 輸出: 9 (1! + 2! + 3! = 1 + 2 + 6)</pre>
<p><span>二項式係數： 寫一個函數 binomial_coefficient，接受兩個整數 n 和 k，並返回二項式係數 "n 選 k"（n choose k）。例如：binomial_coefficient(5, 2) 應返回 10。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math
 
def binomial_coefficient(n, k):
    # 使用二項式係數公式 C(n, k) = n! / (k! * (n-k)!)
    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))
 
# 測試函數
result = binomial_coefficient(5, 2)
print(result)  # 輸出: 10
</pre>
<p><span>寫一個函數 `sort_list`，接受一個包含整數的清單作為參數，並返回該清單的排序版本（從小到大）。例如：`sort_list([3, 1, 4, 1, 5])` 應返回 `[1, 1, 3, 4, 5]`。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def sort_list(lst):
    # 使用內建的 sorted 函數對清單進行排序並返回排序後的清單
    return sorted(lst)
 
# 測試函數
result = sort_list([3, 1, 4, 1, 5])
print(result)  # 輸出: [1, 1, 3, 4, 5]</pre>
<p><span>寫一個函數 remove_duplicates，接受一個包含整數的清單作為參數，並返回去除重複元素後的清單。例如：remove_duplicates([1, 2, 2, 3, 4, 4, 5]) 應返回 [1, 2, 3, 4, 5]。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def remove_duplicates(lst):
    # 使用 set() 去除重複的元素，並使用 list() 轉回清單
    return list(set(lst))
 
# 測試函數
result = remove_duplicates([1, 2, 2, 3, 4, 4, 5])
print(result)  # 輸出: [1, 2, 3, 4, 5]
</pre>
<p><span>寫一個函數 reverse_list，接受一個包含整數的清單作為參數，並返回該清單的反轉版本。例如：reverse_list([1, 2, 3, 4, 5]) 應返回 [5, 4, 3, 2, 1]。</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def reverse_list(lst):
    # 使用內建的 reversed 函數反轉清單，並將其轉回清單
    return list(reversed(lst))
 
# 測試函數
result = reverse_list([1, 2, 3, 4, 5])
print(result)  # 輸出: [5, 4, 3, 2, 1]
</pre>
</div>
</div>
</div><h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<div id="immersive-translate-image-tools" style="all: initial;"></div>